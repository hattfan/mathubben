<!DOCTYPE html>
<html>

<head>
  <meta charset="utf-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <title>Page Title</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <style>
    .background {
      fill: none;
      pointer-events: all;
    }

    #states {
      fill: #aaa;
    }

    #states .active {
      display: none;
    }

    #state-borders {
      fill: none;
      stroke: #fff;
      stroke-width: 1.5px;
      stroke-linejoin: round;
      stroke-linecap: round;
      pointer-events: none;
    }

    .county-boundary {
      fill: #aaa;
      stroke: #fff;
      stroke-width: .5px;
    }

    .county-boundary:hover,
    .state:hover {
      fill: orange;
    }
  </style>
</head>

<body>
    <script src="//d3js.org/d3.v4.min.js"></script>
    <script src="//d3js.org/topojson.v1.min.js"></script>

  <script>
    var width = 960,
      height = 700,
      centered;
      

    var projection = d3.geoMercator()
      .scale(1100)
      .translate([0, 1900])

    var path = d3.geoPath()
      .projection(projection);


    var svg = d3.select("body").append("svg")
      .attr("width", width)
      .attr("height", height);

    svg.append("rect")
      .attr("class", "background")
      .attr("width", width)
      .attr("height", height)
      .on("click", clicked);

    var g = svg.append("g");

  var urlSwedenKommuner = "js/maptest/sweden-municipalities.json"
  var urlSwedenLaen = "js/maptest/sweden-counties.json"

  d3.queue()
    .defer(d3.json, urlSwedenKommuner)
    .defer(d3.json, urlSwedenLaen)

    .await(function (error, kommunMapData, laenMapData) {
      if (error) throw error;
      console.log('laenMapData', laenMapData)
      console.log('kommunMapData', kommunMapData)
      var laenGeoJson = topojson.feature(laenMapData, laenMapData.objects.SWE_adm1);
      var kommunGeoJson = topojson.feature(kommunMapData, kommunMapData.objects.SWE_adm2);

      g.append("g")
        .attr("id", "counties")
        .selectAll("path")
        .data(topojson.feature(kommunMapData, kommunMapData.objects.SWE_adm2).features)
        .enter().append("path")
        .attr("d", path)
        .attr("class", "county-boundary")
        .on("click", countyclicked);

      g.append("g")
        .attr("id", "states")
        .selectAll("path")
        .data(topojson.feature(laenMapData, laenMapData.objects.SWE_adm1).features)
        .enter().append("path")
        .attr("d", path)
        .attr("class", "state")
        .on("click", clicked);


      g.append("path")
        .datum(topojson.mesh(laenMapData, laenMapData.objects.SWE_adm1, function (a, b) {
          return a !== b;
        }))
        .attr("id", "state-borders")
        .attr("d", path);
    });


    function clicked(d) {
      var x, y, k;

      if (d && centered !== d) {
        var centroid = path.centroid(d);
        x = centroid[0];
        y = centroid[1];
        k = 4;
        centered = d;
      } else {
        x = width / 2;
        y = height / 2;
        k = 1;
        centered = null;
      }

      g.selectAll("path")
        .classed("active", centered && function (d) {
          return d === centered;
        });

      g.transition()
        .duration(750)
        .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")scale(" + k + ")translate(" + -x + "," + -y +
          ")")
        .style("stroke-width", 1.5 / k + "px");
    }

    function countyclicked(d) {
      alert(d.id);
    }
  </script>
</body>

</html>